esphome:
  name: esp32-c3
  platformio_options:
    board_build.f_flash: 40000000L
    board_build.flash_mode: dio
    board_build.flash_size: 4MB

esp32:
  variant: ESP32C3
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf

# Enable Home Assistant API
api:
  encryption:
    key: ""

ota:
  - platform: esphome
    password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Ble-motion-Hotspot"
    password: "1234567890"

captive_portal:

# Enable logging
logger:
  level: INFO  # Set to DEBUG to capture detailed logs


esp32_ble_tracker: #### Stop the active scan ####
  scan_parameters: 
    active: false

# Define BLE client
ble_client:
  id: ld2411_client
  mac_address: "17:20:2A:7F:0D:C6"  # Change to your sensor's MAC address


# Global variable to hold the current status string (target type).
globals:
  - id: ld2411_status_str
    type: std::string
    restore_value: no
    initial_value: '"Unknown"'

# Sensor to process BLE notifications and extract the distance.
# Expected packet format: AA AA <frame_type> <dist_LSB> <dist_MSB> 55 55
sensor:
  - platform: ble_client
    type: characteristic
    ble_client_id: ld2411_client
    service_uuid: "0000FFF0-0000-1000-8000-00805F9B34FB"
    characteristic_uuid: "0000FFF1-0000-1000-8000-00805F9B34FB"
    notify: true
    name: "LD2411 Distance"
    id: ld2411_distance
    unit_of_measurement: "cm"
    state_class: measurement
    device_class: distance
    lambda: |-
      // Use a static variable to store the last valid distance.
      static uint16_t last_distance = 0;
      
      // Ensure packet is at least 7 bytes.
      if (x.size() < 7) {
        ESP_LOGW("ld2411", "Packet too short: %d bytes", x.size());
        return NAN;
      }
      
      // Log the raw BLE data as a hexadecimal string.
      std::string raw = format_hex_pretty(x.data(), x.size());
      ESP_LOGD("ld2411", "Received raw BLE data: %s", raw.c_str());
      
      // Check header: first two bytes must be AA AA.
      if (x[0] != 0xAA || x[1] != 0xAA) {
        ESP_LOGW("ld2411", "Invalid frame header: %02X %02X", x[0], x[1]);
        id(ld2411_status_str) = "Invalid header";
        return NAN;
      }
      
      // Extract frame type from byte 2.
      uint8_t frame_type = x[2];
      
      // Update status based on frame type and process accordingly.
      if (frame_type == 0x00) {
        // "No target" frame: set status and return NAN so distance displays as unknown.
        ESP_LOGD("ld2411", "No target detected.");
        id(ld2411_status_str) = "No target";
        return NAN;
      } else if (frame_type == 0x01) {
        // Campaign Target frame.
        ESP_LOGD("ld2411", "Campaign target detected.");
        id(ld2411_status_str) = "Campaign Target";
      } else if (frame_type == 0x02) {
        // Motion Detected frame.
        ESP_LOGD("ld2411", "Motion detected.");
        id(ld2411_status_str) = "Motion detected";
      } else {
        ESP_LOGW("ld2411", "Unknown frame type: %02X", frame_type);
        id(ld2411_status_str) = "Unknown";
        return NAN;
      }
      
      // For frame types 0x01 and 0x02, extract the distance from bytes 3 and 4 (little-endian).
      uint16_t distance = (x[3]) | (x[4] << 8);
      ESP_LOGD("ld2411", "Parsed distance: %u cm", distance);
      last_distance = distance;
      return (float)distance;

# Text sensor to display the BLE status (target type).
text_sensor:
  - platform: template
    name: "LD2411 Status"
    id: ld2411_status
    lambda: |-
      return id(ld2411_status_str);

# Binary sensor to show BLE connection state
binary_sensor:
  - platform: status
    name: "ESP32 Status"
  
  - platform: template
    name: "BLE Connected"
    id: ble_connected
    icon: mdi:bluetooth-connect
    lambda: |-
      return id(ld2411_client).connected();
