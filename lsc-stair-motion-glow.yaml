esphome:
  name: lsc-32036322-l
  friendly_name: Lsc 3203632-1

bk72xx:
  board: generic-bk7231n-qfn32-tuya

# Wi-Fi configuration
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  on_connect:
    - logger.log: "WiFi connected"
    - switch.turn_on: wifi_connected_switch

  on_disconnect:
    - logger.log: "WiFi disconnected"
    - switch.turn_off: wifi_connected_switch
  ap:
    ssid: "Stair"
    password: "uzzPzj23jLFS"

api:
  encryption:
    key: "insert-key-here"
ota:
  - platform: esphome
    password: "insert-key-here1"

    # Enable logging
logger:
  level: INFO 


# Global variables
globals:
  - id: active_effect
    type: int
    restore_value: no
    initial_value: '0'
  - id: current_step
    type: int
    initial_value: '-1'
  - id: previous_distance
    type: float
    initial_value: '0.0'
  - id: motion_direction
    type: int
    initial_value: '1' 
  - id: idle_counter
    type: int
    initial_value: '0'
  - id: startup_status
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: startup_ran
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: fading
    type: bool
    initial_value: 'false'
  - id: brightness_var
    type: float
    restore_value: no
    initial_value: '1.0'

interval:
  - interval: 1s
    then:
      - script.execute: startup_animation

# Constants
number:
  - platform: template
    name: "Step Distance (cm)"
    id: step_distance
    initial_value: 30.0
    min_value: 10
    max_value: 50
    step: 1
    optimistic: true  

  - platform: template
    name: "Number of Steps"
    id: num_steps
    initial_value: 15
    min_value: 1
    max_value: 30
    step: 1
    optimistic: true  

sensor:
  - platform: homeassistant
    id: stair_step
    entity_id: sensor.stair_step  # This is the sensor you need to define in Home Assistant
    internal: true
    on_value:
      then:
        - lambda: |-
            if (!std::isnan(x)) {
              int step = static_cast<int>(x);
              id(current_step) = step;
              ESP_LOGI("stair_effect", "Updated current step from HA: %d", step);
            } else {
              id(current_step) = 1; 
              ESP_LOGW("stair_effect", "Received NaN from sensor.stair_step â€“ ");
            }
time:
  - platform: homeassistant
    id: esphome_time

output:
  - platform: template
    id: output_component1
    type: float
    power_supply: powersupply
    zero_means_zero: True
    write_action:
      lambda: |-
        auto call = id(cw_ww_partition).turn_on();
        call.set_red(state);
        call.set_transition_length(100);
        call.perform();
  - platform: template
    id: output_component2
    type: float
    power_supply: powersupply
    zero_means_zero: True
    write_action:
      lambda: |-
        auto call = id(cw_ww_partition).turn_on();
        call.set_blue(state);
        call.set_transition_length(100);
        call.perform();
power_supply:
  - id: powersupply
    pin: 8
light:
  - platform: cwww
    id: cw_ww
    name: "CWWW"
    cold_white: output_component2
    warm_white: output_component1
    cold_white_color_temperature: 6500 K
    warm_white_color_temperature: 2700 K
    gamma_correct: 1
    constant_brightness: False
    on_turn_on: 
      then:
        - light.turn_off: rgb_partition
  - platform: beken_spi_led_strip
    id: rgbic_cctic_ledstrip
    pin: 16
    num_leds: 50
    chipset: SM16703
    name: "Ledstrip"
    rgb_order: BRG
    internal: true
  - platform: partition
    id: rgb_partition
    default_transition_length: 0.5s
    name: "RGB LEDs"
    power_supply: powersupply
    segments:
      - id: rgbic_cctic_ledstrip
        from: 0
        to: 0
      - id: rgbic_cctic_ledstrip
        from: 2
        to: 2
      - id: rgbic_cctic_ledstrip
        from: 4
        to: 4
      - id: rgbic_cctic_ledstrip
        from: 6
        to: 6
      - id: rgbic_cctic_ledstrip
        from: 8
        to: 8
      - id: rgbic_cctic_ledstrip
        from: 10
        to: 10
      - id: rgbic_cctic_ledstrip
        from: 12
        to: 12
      - id: rgbic_cctic_ledstrip
        from: 14
        to: 14
      - id: rgbic_cctic_ledstrip
        from: 16
        to: 16
      - id: rgbic_cctic_ledstrip
        from: 18
        to: 18
      - id: rgbic_cctic_ledstrip
        from: 20
        to: 20
      - id: rgbic_cctic_ledstrip
        from: 22
        to: 22
      - id: rgbic_cctic_ledstrip
        from: 24
        to: 24
      - id: rgbic_cctic_ledstrip
        from: 26
        to: 26
      - id: rgbic_cctic_ledstrip
        from: 28
        to: 28
      - id: rgbic_cctic_ledstrip
        from: 30
        to: 30
      - id: rgbic_cctic_ledstrip
        from: 32
        to: 32
      - id: rgbic_cctic_ledstrip
        from: 34
        to: 34
      - id: rgbic_cctic_ledstrip
        from: 36
        to: 36
      - id: rgbic_cctic_ledstrip
        from: 38
        to: 38
      - id: rgbic_cctic_ledstrip
        from: 40
        to: 40
      - id: rgbic_cctic_ledstrip
        from: 42
        to: 42
      - id: rgbic_cctic_ledstrip
        from: 44
        to: 44
      - id: rgbic_cctic_ledstrip
        from: 46
        to: 46
      - id: rgbic_cctic_ledstrip
        from: 48
        to: 48
    effects:
     - random:
     - pulse:
     - strobe:
     - flicker:
     - addressable_rainbow:
     - addressable_color_wipe:
     - addressable_scan:
     - addressable_twinkle:
     - addressable_random_twinkle:
     - addressable_fireworks:
     - addressable_lambda:
         name: "Stair Motion Glow"
         update_interval: 500ms
         lambda: |-
          static unsigned long last_motion_time = 0;
          float brightness_factor = id(brightness_var);
          int step = id(current_step);
          int total_steps = id(num_steps).state;
          if (step < 0 || step >= total_steps) {
            for (int i = 0; i < it.size(); i++) {
              it[i] = Color(0, 0, 0);
            }
            return;
          }

          for (int i = 0; i < it.size(); i++) {
            float dist = abs(i - step);
            float brightness = 0.0;
            if (dist < 1.0) brightness = 1.0;
            else if (dist < 2.0) brightness = 0.6;
            else if (dist < 3.0) brightness = 0.3;

            auto color = Color(255, 255, 255);
            it[i] = Color(
              color.red * brightness * brightness_factor,
              color.green * brightness * brightness_factor,
              color.blue * brightness * brightness_factor
            );
          }

     - addressable_lambda:
         name: "Stair Motion Glow Alert"
         update_interval: 100ms
         lambda: |-
          
          static int head1 = 0;  // Head for trail 1
          static int head2 = 10; // Head for trail 2 (starts later)
          static int head3 = 20; // Head for trail 3 (starts later)
          static int delay_step = 0;  // Delay step for each trail's progress

          int size = it.size();  // Get the number of LEDs
          int trail_length = 5;  // Length of each trail (5 LEDs lit)
          int space_between_trails = 12;  // Space between the trails (50 unlit LEDs)

          // Move the heads forward
          head1 += 1;
          if (head1 >= size) head1 = 0;  // Wrap around

          head2 += 1;
          if (head2 >= size) head2 = 0;  // Wrap around

          head3 += 1;
          if (head3 >= size) head3 = 0;  // Wrap around

          // Set all LEDs to dimmed warm white as the background
          for (int i = 0; i < size; i++) {
            it[i] = Color(128, 0, 0);  // Dimmed warm white (low red, green, and blue)
          }

          // Create 3 simultaneous trails
          // Trail 1
          for (int i = 0; i < trail_length; i++) {
            int pos = (head1 + i) % size;  // Trail 1's LED positions
            it[pos] = Color(0, 255, 0);  // Green color
          }

          // Trail 2 (delayed)
          for (int i = 0; i < trail_length; i++) {
            int pos = (head2 + i) % size;  // Trail 2's LED positions
            it[pos] = Color(0, 255, 0);  // Green color
          }

          // Trail 3 (delayed)
          for (int i = 0; i < trail_length; i++) {
            int pos = (head3 + i) % size;  // Trail 3's LED positions
            it[pos] = Color(0, 255, 0);  // Green color
          }

          // Create spaces between the trails (50 unlit LEDs)
          for (int i = 0; i < size; i++) {
            if (i % space_between_trails == 0) {
              // Unlit LEDs after every stair step --in my case 5  LEDs 
              it[i] = Color(0, 0, 0);  // Turn off these LEDs
            }
          }
     - addressable_lambda:
         name: "Startup sequence animation"
         update_interval: 80ms
         lambda: |-
            
            static Color green = Color(0, 255, 0);
            static Color red = Color(255, 0, 0);
            static Color yellow = Color(255, 255, 0);
            static Color black = Color(0, 0, 0);

            static bool transitioned = false;
            static int step = 0;
            static unsigned long last_step_time = 0;
            static unsigned long transition_start_time = 0;
            static bool transition_timer_started = false;
            static unsigned long startup_time = 0;

            unsigned long now = esphome::millis(); 
            const int delay_between_steps = 2000;
            const int size = it.size();

            if (startup_time == 0) {
              startup_time = now;
              ESP_LOGI("startup", "Startup initialized");
            }

            // Check and update each step
            if (!transitioned && now - last_step_time > delay_between_steps) {
              last_step_time = now;
              ESP_LOGI("startup", "Running step %d", step);

              switch (step) {
                case 0:
                  ESP_LOGI("startup", "Step 1 - Booting");
                  it[0] = green;
                  break;

                case 1: {
                  bool wifi_ok = id(wifi_connected_switch).state;
                  ESP_LOGI("startup", "Step 2 - WiFi: %s", wifi_ok ? "CONNECTED" : "DISCONNECTED");
                  it[1] = wifi_ok ? green : red;
                  break;
                }

                case 2: {
                  // LD2411 check (optional if .has_state() available)
                  if (id(ld2411_connected).has_state()) {
                    bool ld_ok = id(ld2411_connected).state;
                    it[2] = ld_ok ? green : red;
                    ESP_LOGI("startup", "Step 3 - LD2411: %s", ld_ok ? "CONNECTED" : "DISCONNECTED");
                  } else {
                    it[2] = yellow;
                    ESP_LOGI("startup", "Step 3 - LD2411: not ready");
                  }
                  break;
                }

                case 3: {
                  // HA API state (non-blocking)
                  if (id(ha_status).has_state()) {
                    bool ha_ok = id(ha_status).state;
                    it[3] = ha_ok ? green : red;
                    ESP_LOGI("startup", "Step 4 - HA: %s", ha_ok ? "ONLINE" : "OFFLINE");
                 } else {
                   it[3] = yellow;
                   ESP_LOGI("startup", "Step 4 - HA: not ready");
                  }
                  break;
                }
              }

              step++;

              if (step > 3) {
                if (!transition_timer_started) {
                  transition_start_time = now;
                  transition_timer_started = true;
                  ESP_LOGI("startup", "Startup complete. Transitioning soon...");
                  return;
                }

                if (now - transition_start_time >= 2000) {
                  transitioned = true;
                  step = 0;  // reset for reuse if needed
                  ESP_LOGI("startup", "Transitioning to final animation...");
                }
              }
            }

            // Final animation
            if (transitioned) {
              static int head = 0;
              static int direction = 1;

              head += direction;

              if (head >= size) {
                head = size - 1;
                direction = -1;
              } else if (head < 0) {
                head = 0;
                direction = 0;

                ESP_LOGI("startup", "Final animation complete, switching effect...");
                auto call = id(rgb_partition).turn_on();
                call.set_effect("Stair Motion Glow");
                call.perform();
                id(active_effect) = 7;
                return;
              }

              // Only clear trail
              const int trail_len = 5;
              for (int i = head - (trail_len - 1) * direction; i != head + direction; i += direction) {
                if (i >= 0 && i < size) it[i] = black;
              }

              for (int i = 0; i < trail_len; i++) {
                int pos = head - i * direction;
                if (pos >= 0 && pos < size) {
                  float brightness = 1.0 - (i * 0.2);
                  it[pos] = Color(
                    green.red * brightness,
                    green.green * brightness,
                    green.blue * brightness
                  );
                }
              }
            }

    on_turn_on: 
      then:
        - light.turn_off: cw_ww


  - platform: partition
    id: cw_ww_partition
    internal: True
    name: "CW/WW LEDs"
    default_transition_length: 0.5s
    segments:
      - id: rgbic_cctic_ledstrip
        from: 1
        to: 1
      - id: rgbic_cctic_ledstrip
        from: 3
        to: 3
      - id: rgbic_cctic_ledstrip
        from: 5
        to: 5
      - id: rgbic_cctic_ledstrip
        from: 7
        to: 7
      - id: rgbic_cctic_ledstrip
        from: 9
        to: 9
      - id: rgbic_cctic_ledstrip
        from: 11
        to: 11
      - id: rgbic_cctic_ledstrip
        from: 13
        to: 13
      - id: rgbic_cctic_ledstrip
        from: 15
        to: 15
      - id: rgbic_cctic_ledstrip
        from: 17
        to: 17
      - id: rgbic_cctic_ledstrip
        from: 19
        to: 19
      - id: rgbic_cctic_ledstrip
        from: 21
        to: 21
      - id: rgbic_cctic_ledstrip
        from: 23
        to: 23
      - id: rgbic_cctic_ledstrip
        from: 25
        to: 25
      - id: rgbic_cctic_ledstrip
        from: 27
        to: 27
      - id: rgbic_cctic_ledstrip
        from: 29
        to: 29
      - id: rgbic_cctic_ledstrip
        from: 31
        to: 31
      - id: rgbic_cctic_ledstrip
        from: 33
        to: 33
      - id: rgbic_cctic_ledstrip
        from: 35
        to: 35
      - id: rgbic_cctic_ledstrip
        from: 37
        to: 37
      - id: rgbic_cctic_ledstrip
        from: 39
        to: 39
      - id: rgbic_cctic_ledstrip
        from: 41
        to: 41
      - id: rgbic_cctic_ledstrip
        from: 43
        to: 43
      - id: rgbic_cctic_ledstrip
        from: 45
        to: 45
      - id: rgbic_cctic_ledstrip
        from: 47
        to: 47
      - id: rgbic_cctic_ledstrip
        from: 49
        to: 49
remote_receiver:
  pin:
    number: P26
    inverted: true
  dump: nec

script:
  # Timer scripts to turn off RGB and White after specific durations
  - id: timer_1h
    mode: single
    then:
      - delay: 1h
      - light.turn_off:
          id: rgb_partition
      - light.turn_off:
          id: cw_ww_partition
  - id: timer_2h
    mode: single
    then:
      - delay: 2h
      - light.turn_off:
          id: rgb_partition
      - light.turn_off:
          id: cw_ww_partition
  - id: timer_3h
    mode: single
    then:
      - delay: 3h
      - light.turn_off:
          id: rgb_partition
      - light.turn_off:
          id: cw_ww_partition

  - id: startup_animation
    then:
      - if:
          condition:
            lambda: 'return !id(startup_ran);'
          then:
            - lambda: |-
                auto call = id(rgb_partition).turn_on();
                call.set_effect("Startup Sequence animation");
                call.perform();
            - lambda: 'id(startup_ran) = true;'

switch:
  - platform: template
    name: "WiFi Connected Switch"
    id: wifi_connected_switch
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

binary_sensor:

  - platform: status
    name: "ESP Status"
    id: esp_status

  - platform: homeassistant
    name: "HA Status"
    id: ha_status
    entity_id: binary_sensor.home_assistant_online


  - platform: homeassistant
    name: "Motion Sensor status"
    id: ld2411_connected
    entity_id: binary_sensor.ld2411_connected
    internal: True

  - platform: template
    name: "WiFi Connection Status"
    id: wifi_status_sensor
    lambda: |-
      return id(wifi_connected_switch).state;

  - platform: homeassistant
    name: "Auto-Off Trigger"
    id: auto_off_trigger
    entity_id: binary_sensor.stair_motion_timeout
    on_press:
      then:
        - logger.log:
            format: "ðŸ•’ Auto-Off Triggered: Motion timeout detected at %s"
            args: ['id(esphome_time).now().strftime("%H:%M:%S").c_str()']
            level: INFO
        - repeat:
            count: 100
            then:
              - lambda: |-
                  // Exponential fade out
                  float progress = float(id(brightness_var)); // Get current brightness level (0-1)
                  float easing_factor = exp(-progress * 5.0);  // Exponential decay function (adjust the 5.0 to change fade speed)
                  id(brightness_var) = easing_factor;
              - delay: 15ms
        - lambda: |-
            id(brightness_var) = 1.0;
            auto call = id(rgb_partition).turn_off();
            call.perform();

  - platform: homeassistant
    name: "Auto-On Trigger"
    id: auto_on_trigger
    entity_id: binary_sensor.stair_motion_detected
    on_press:
      then:
        - logger.log: "Motion detected - turning on full brightness"
        - lambda: |-
            id(brightness_var) = 1.0;
            auto call = id(rgb_partition).turn_on();
            call.perform();  

  # Pushbutton 1
  - platform: gpio
    pin:
      number: P9
      mode: INPUT_PULLUP
    name: "Button 3"
    internal: true
  # Pushbutton 2
  - platform: gpio
    pin:
      number: P24
      mode: INPUT_PULLUP
    name: "Button 4"
    internal: true
  # Pushbutton 3
  - platform: gpio
    pin:
      number: P28
      mode: INPUT_PULLUP
    name: "Button 50"
    internal: true
  # Button 1: Brightness RGB Up
  - platform: remote_receiver
    name: "Brightness RGB Up"
    internal: true
    nec:
      address: 0xEF00
      command: 0xE31C
    on_press:
      - if:
          condition:
            - light.is_on: cw_ww
          then: 
            - light.dim_relative:
                id: cw_ww
                relative_brightness: 10%
          else:
            - light.dim_relative:
                id: rgb_partition
                relative_brightness: 0%
  # Button 2: Brightness RGB Down
  - platform: remote_receiver
    name: "Brightness RGB Down"
    internal: true
    nec:
      address: 0xEF00
      command: 0xE21D
    on_press:
      - if:
          condition:
            - light.is_on: cw_ww
          then: 
            - light.dim_relative:
                id: cw_ww
                relative_brightness: -10%
          else:
            - light.dim_relative:
                id: rgb_partition
                relative_brightness: -10%
  # Button 3: OFF
  - platform: remote_receiver
    name: "Button OFF"
    internal: true
    nec:
      address: 0xEF00
      command: 0xE11E
    on_press:
      - light.turn_off:
          id: rgb_partition
      - light.turn_off:
          id: cw_ww_partition
  # Button 4: ON
  - platform: remote_receiver
    name: "Button ON"
    internal: true
    nec:
      address: 0xEF00
      command: 0xE01F
    on_press:
      - light.turn_on:
          id: rgb_partition
  # Button 5: RGB Red
  - platform: remote_receiver
    name: "RGB Red"
    internal: true
    nec:
      address: 0xEF00
      command: 0xFF00
    on_press:
      - light.turn_on:
          id: rgb_partition
          red: 1.0
          green: 0.0
          blue: 0.0
  # Button 6: RGB Green
  - platform: remote_receiver
    name: "RGB Green"
    internal: true
    nec:
      address: 0xEF00
      command: 0xFE01
    on_press:
      - light.turn_on:
          id: rgb_partition
          red: 0.0
          green: 1.0
          blue: 0.0
  # Button 7: RGB Blue
  - platform: remote_receiver
    name: "RGB Blue"
    internal: true
    nec:
      address: 0xEF00
      command: 0xFD02
    on_press:
      - light.turn_on:
          id: rgb_partition
          red: 0.0
          green: 0.0
          blue: 1.0
  # Button 8: Timer 1H
  - platform: remote_receiver
    name: "Timer 1H"
    internal: true
    nec:
      address: 0xEF00
      command: 0xFC03
    on_press:
      - script.execute: timer_1h
  # Button 9: Orange
  - platform: remote_receiver
    name: "Oranje"
    internal: true
    nec:
      address: 0xEF00
      command: 0xFB04
    on_press:
      - light.turn_on:
          id: rgb_partition
          red: 1.0
          green: 0.5
          blue: 0.0
  # Button 10: Light Green
  - platform: remote_receiver
    name: "Lichtgroen"
    internal: true
    nec:
      address: 0xEF00
      command: 0xFA05
    on_press:
      - light.turn_on:
          id: rgb_partition
          red: 0.5
          green: 1.0
          blue: 0.0
  # Button 11: Light Blue
  - platform: remote_receiver
    name: "Lichtblauw"
    internal: true
    nec:
      address: 0xEF00
      command: 0xF906
    on_press:
      - light.turn_on:
          id: rgb_partition
          red: 0.0
          green: 1.0
          blue: 1.0
  # Button 12: Timer 2H
  - platform: remote_receiver
    name: "Timer 2H"
    internal: true
    nec:
      address: 0xEF00
      command: 0xF807
    on_press:
      - script.execute: timer_2h
  # Button 13: Yellow
  - platform: remote_receiver
    name: "Geel"
    internal: true
    nec:
      address: 0xEF00
      command: 0xF708
    on_press:
      - light.turn_on:
          id: rgb_partition
          red: 1.0
          green: 1.0
          blue: 0.0
  # Button 14: Dark Green
  - platform: remote_receiver
    name: "Donkergroen"
    internal: true
    nec:
      address: 0xEF00
      command: 0xF609
    on_press:
      - light.turn_on:
          id: rgb_partition
          red: 0.0
          green: 0.5
          blue: 0.0
  # Button 15: Purple
  - platform: remote_receiver
    name: "Paars"
    internal: true
    nec:
      address: 0xEF00
      command: 0xF50A
    on_press:
      - light.turn_on:
          id: rgb_partition
          red: 0.5
          green: 0.0
          blue: 0.5
  # Button 16: Timer 3H
  - platform: remote_receiver
    name: "Timer 3H"
    internal: true
    nec:
      address: 0xEF00
      command: 0xF40B
    on_press:
      - script.execute: timer_3h
  # Button 17: WW (Warm White)
  - platform: remote_receiver
    name: "WW (Warm Wit)"
    internal: true
    nec:
      address: 0xEF00
      command: 0xF30C
    on_press:
      - light.turn_on:
          id: cw_ww
          warm_white : 1.0
          cold_white: 0.0
  # Button 19: CW (Neutral White)
  - platform: remote_receiver
    name: "NW (Neutral White)"
    internal: true
    nec:
      address: 0xEF00
      command: 0xF20D
    on_press:
      - light.turn_on:
          id: cw_ww
          warm_white : 1.0
          cold_white: 1.0
  # Button 19: CW (Cool White)
  - platform: remote_receiver
    name: "CW (Cool White)"
    internal: true
    nec:
      address: 0xEF00
      command: 0xF10E
    on_press:
      - light.turn_on:
          id: cw_ww
          warm_white : 0.0
          cold_white: 1.0
  # Button 20: Colortemperature up
  - platform: remote_receiver
    name: "Colortemperature Up"
    internal: true
    nec:
      address: 0xEF00
      command: 0xF00F
    on_press:
      - light.turn_on:
          id: cw_ww
          color_temperature: !lambda |-
            float current_temp = id(cw_ww).current_values.get_color_temperature();
            // Verhoog (koelere lichtkleur) door mireds met 10% te verlagen
            float new_temp = current_temp * 1.1;
            // Bewaak de grenzen
            if(new_temp < 153) new_temp = 153;   // ~6500K
            if(new_temp > 370) new_temp = 370;   // ~2700K
            return new_temp;
  # Button 21: Effect Speed+
  - platform: remote_receiver
    name: "Effect Speed+"
    internal: true
    nec:
      address: 0xEF00
      command: 0xEF10
    on_press:
      - lambda: |-
          id(active_effect) += 1;
          if (id(active_effect) > 7) id(active_effect) = 1;  // Restart at the first effect
          auto call = id(rgb_partition).turn_on();
          switch (id(active_effect)) {
            case 1:
              call.set_effect("Rainbow");
              break;
            case 2:
              call.set_effect("Color Wipe");
              break;
            case 3:
              call.set_effect("Scan");
              break;
            case 4:
              call.set_effect("fireworks");
              break;
            case 5:
              call.set_effect("Startup sequence animation");
              break;
            case 6:
              call.set_effect("Stair Motion Glow Alert");
              break;
            case 7:
              call.set_effect("Stair Motion Glow");
              break;
          }
          call.perform();
  # Button 22: Mode Stop Effect
  - platform: remote_receiver
    name: "Next Effect"
    internal: true
    nec:
      address: 0xEF00
      command: 0xEE11
    on_press:
      - lambda: |-
          id(active_effect) = 0;  // Set active effect to none
          auto call = id(rgb_partition).turn_on();
          call.set_effect("None");  // Stop effects
          call.perform();
  # Button 23: Effect Speed-
  - platform: remote_receiver
    name: "Effect Speed-"
    internal: true
    nec:
      address: 0xEF00
      command: 0xED12
    on_press:
      - lambda: |-
          id(active_effect) -= 1;
          if (id(active_effect) < 1) id(active_effect) = 7;  // Go to the last effect
          auto call = id(rgb_partition).turn_on();
          switch (id(active_effect)) {
            case 1:
              call.set_effect("Rainbow");
              break;
            case 2:
              call.set_effect("Color Wipe");
              break;
            case 3:
              call.set_effect("Scan");
              break;
            case 4:
              call.set_effect("fireworks");
              break;
            case 5:
              call.set_effect("Startup sequence animation");
              break;
            case 6:
              call.set_effect("Stair Motion Glow Alert");
              break;
            case 7:
              call.set_effect("Stair Motion Glow");
              break;
          }
          call.perform();
  # Button 24: Colortemperature Down
  - platform: remote_receiver
    name: "Colortemperature Down"
    internal: true
    nec:
      address: 0xEF00
      command: 0xEC13
    on_press:
      - light.turn_on:
          id: cw_ww
          color_temperature: !lambda |-
            float current_temp = id(cw_ww).current_values.get_color_temperature();
            // Verhoog (koelere lichtkleur) door mireds met 10% te verlagen
            float new_temp = current_temp * 0.9;
            // Bewaak de grenzen
            if(new_temp < 153) new_temp = 153;   // ~6500K
            if(new_temp > 370) new_temp = 370;   // ~2700K
            return new_temp;
  # Button 25: Stair Motion Glow
  - platform: remote_receiver
    name: "Stair Motion Glow"
    internal: true
    nec:
      address: 0xEF00
      command: 0xEB14
    on_press:
      then:
        - light.turn_on:
            id: rgb_partition
            effect: "Stair Motion Glow Alert"
